# Basic iptables rule file 
# Note: default interface = {{ ansible_default_ipv4.interface }}
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]

{% if inventory_hostname in groups['personal_use'] %}
{# We can afford to be lax and allow all outgoing connections #}
:OUTPUT ACCEPT [0:0]
{% else %}
{# we need to be stricter #}
:OUTPUT DROP [0:0]
{% endif %}

# Allow any established connections to continue
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT 
-A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT 

# Everything on the loopback interface
-A INPUT -i lo -j ACCEPT 
-A OUTPUT -o lo -j ACCEPT 

# Allow all outgoing pings
-A OUTPUT -p icmp -j ACCEPT 

{% if ansible_default_ipv4.address|ipaddr('192.168.0.0/16') %}
# Only allow pings from the local network
-A INPUT -s 192.168.0.0/16 -p icmp -j ACCEPT 
{% endif %}

# Allow DHCP
-A OUTPUT -p udp --sport 67:68 --dport 67:68 -j ACCEPT

# Allow DNS
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT

# Allow outbound Network Time Protocol requests
-A OUTPUT -p udp --dport 123 --sport 123 -j ACCEPT

# Allow outbound email
-A OUTPUT -p tcp --dport 25 -m state --state NEW -j ACCEPT

{% if ansible_default_ipv4.address|ipaddr('192.168.0.0/16') %}
# If we are behind a router (IP is in 192.168.0.0/16) only allow incoming ssh from
# places inside the local network
-A INPUT -s 192.168.0.0/16 -p tcp --dport 22 -m state --state NEW -j ACCEPT
{% else %}
# Allow incoming and outgoing ssh connections from anywhere
-A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT
{% endif %}

# Allow all outgoing ssh connections
-A OUTPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT

# Allow all incoming and outgoing http/https connections
-A OUTPUT -p tcp -m multiport --dport 80,443 -m state --state NEW -j ACCEPT

{% if inventory_hostname == 'dads_laptop' %}
# Because dad's laptop is currently a GitLab server
-A INPUT -p tcp -s 192.168.0.0/16 --dport 80 -m state --state NEW -j ACCEPT
{% endif %}

{% if inventory_hostname in groups['webservers'] %}
# Web server specific settings

# Open up http/https if it's a web server
-A INPUT -p tcp -m multiport --dport 80,443 -m state --state NEW -j ACCEPT

# Prevent DOS attempts
-A INPUT -p tcp -m multiport --dport 80,443 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT
{% endif %}


{% if inventory_hostname in groups['personal_use'] %}
# Allow IMAP in and secure SMTP out
-A INPUT -p tcp --dport 993 -m state --state NEW -j ACCEPT
-A OUTPUT -p tcp --dport 465 -m state --state NEW -j ACCEPT

# Allow IRC out
-A OUTPUT -p tcp -m multiport --dport 6697,6667,6668,6669 -m state --state NEW -j ACCEPT

# Allow outgoing email connections
-A OUTPUT -p tcp -m multiport --dport 143,465,587,993,995 -m state --state NEW -j ACCEPT
{% endif %}


# Allow all outgoing to port 8080 (alternative http, also vpn)
-A OUTPUT -p tcp --dport 8080 -m state --state NEW -j ACCEPT

# Next set up a chain that will log all remaining packets and drop them
-N LOGGING
-A INPUT -j LOGGING
-A LOGGING -m limit --limit 2/min -j LOG --log-prefix "IPTables Packet Dropped: " --log-level 7
# -A LOGGING -j DROP

# Reject all remaining connections properly
-A LOGGING -p tcp -j REJECT --reject-with tcp-reset 
-A LOGGING -p udp -j REJECT --reject-with icmp-port-unreachable 
-A LOGGING -j REJECT --reject-with icmp-proto-unreachable 

COMMIT

